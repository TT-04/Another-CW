global  _start						

N equ 4				;Тут asm_read_decimal фактически кладет в rax число, а остальное только для того, чтобы вывести его на экран			
							
code_zero equ 48				

section .bss					
var_read:	resd N					
var_write:	resd N					
								

section .text					
_start:								
call asm_read_decimal									
call asm_write_decimal			
call asm_exit					

asm_read_decimal:					
call asm_read					
xor rax, rax				
mov rcx, N				
l_rd:					
mov ebx, 10
mul ebx					
mov rdx, N
sub rdx, rcx			
xor rbx, rbx			
mov bl, [var_read + rdx]	
sub bl, code_zero			
add rax, rbx			
loop l_rd			
ret											
					

asm_write_decimal:					
mov rcx, N					
l_wr:						
xor rdx, rdx					
mov ebx, 10				
div ebx					
add rdx, code_zero			
mov rbx, rcx			
dec rbx						
mov [var_write + rbx], dl	
loop l_wr
									
call asm_write					
ret									

asm_read:					
mov rax, 0					
mov rdi, 0					 						
mov rsi, var_read		
mov rdx, N					
syscall					
ret							
	
asm_write:						
mov rax, 1					
mov rdi, 1				
mov rsi, var_write			
mov rdx, N					
syscall						
ret

asm_exit:						
mov rax, 60					
xor rdi, rdi					
syscall
ret
